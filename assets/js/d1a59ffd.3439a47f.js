"use strict";(self.webpackChunkmy_ibax=self.webpackChunkmy_ibax||[]).push([[63],{4998:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>a});var o=s(4848),i=s(8453);const l={},d="Daemon {#daemon}",t={id:"topics/daemons",title:"Daemon",description:"daemon}",source:"@site/docs/topics/daemons.md",sourceDirName:"topics",slug:"/topics/daemons",permalink:"/docs/topics/daemons",draft:!1,unlisted:!1,editUrl:"https://github.com/IBAX-io/docs/edit/main/docs/topics/daemons.md",tags:[],version:"current",frontMatter:{},sidebar:"topicsSidebar",next:{title:"Smart Contracts",permalink:"/docs/topics/script"}},r={},a=[{value:"About the server daemon",id:"about-the-server-daemon",level:2},{value:"Honor node daemon",id:"honor-node-daemon",level:3},{value:"Guardian node daemon",id:"guardian-node-daemon",level:3},{value:"BlockCollection daemon",id:"blockcollection-daemon",level:2},{value:"Blockchain synchronization",id:"blockchain-synchronization",level:3},{value:"Check for blockchain updates",id:"check-for-blockchain-updates",level:4},{value:"Download new blocks",id:"download-new-blocks",level:4},{value:"Solving the fork issue",id:"solving-the-fork-issue",level:4},{value:"Tables",id:"tables-1",level:3},{value:"Request",id:"request-1",level:3},{value:"BlockGenerator daemon",id:"blockgenerator-daemon",level:2},{value:"Pre-verification",id:"pre-verification",level:3},{value:"Block generation",id:"block-generation",level:3},{value:"Tables",id:"tables-2",level:3},{value:"Request",id:"request-2",level:3},{value:"Disseminator daemon",id:"disseminator-daemon",level:2},{value:"Guardian node",id:"guardian-node",level:3},{value:"Honor node",id:"honor-node",level:3},{value:"Tables",id:"tables-3",level:3},{value:"Request",id:"request-3",level:3},{value:"Confirmations daemon",id:"confirmations-daemon",level:2},{value:"Block confirmation",id:"block-confirmation",level:3},{value:"Tables",id:"tables-4",level:3},{value:"Request",id:"request-4",level:3},{value:"TCP service protocol",id:"tcp-service-protocol",level:2},{value:"Request type",id:"request-type",level:2},{value:"Type 1",id:"type-1",level:3},{value:"Request sender",id:"request-sender-1",level:4},{value:"Request data",id:"request-data-1",level:4},{value:"Request processing",id:"request-processing-1",level:4},{value:"Response",id:"response-1",level:4},{value:"Type 2",id:"type-2",level:3},{value:"Request sender",id:"request-sender-2",level:4},{value:"Request data",id:"request-data-2",level:4},{value:"Request processing",id:"request-processing-2",level:4},{value:"Response",id:"response-2",level:4},{value:"Type 4",id:"type-4",level:3},{value:"Request sender",id:"request-sender-3",level:4},{value:"Request data",id:"request-data-3",level:4},{value:"Response",id:"response-3",level:4},{value:"Type 7",id:"type-7",level:3},{value:"Request sender",id:"request-sender-4",level:4},{value:"Request data",id:"request-data-4",level:4},{value:"Response",id:"response-4",level:4},{value:"Type 10",id:"type-10",level:3},{value:"Request sender",id:"request-sender-5",level:4},{value:"Request data",id:"request-data-5",level:4},{value:"Response",id:"response-5",level:4}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"daemon",children:"Daemon"}),"\n",(0,o.jsx)(n.p,{children:"In this section, we will describe how IBAX nodes interact with each other from a\ntechnical perspective."}),"\n",(0,o.jsx)(n.h2,{id:"about-the-server-daemon",children:"About the server daemon"}),"\n",(0,o.jsx)(n.p,{children:"The server daemon needs to run on every network node, which executes various\nserver functions and supports IBAX's blockchain protocol. In the blockchain\nnetwork, the daemon distributes blocks and transactions, generates new blocks,\nand verifies blocks and transactions received, and it can avoid the fork issue."}),"\n",(0,o.jsx)(n.h3,{id:"honor-node-daemon",children:"Honor node daemon"}),"\n",(0,o.jsx)(n.p,{children:"A honor node runs the following server daemons:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#blockgenerator-daemon",children:"BlockGenerator daemon"})}),"\n",(0,o.jsx)(n.p,{children:"Generating new blocks."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#blockcollection-daemon",children:"BlockCollection daemon"})}),"\n",(0,o.jsx)(n.p,{children:"Downloading new blocks from other nodes."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#confirmations-daemon",children:"Confirmations daemon"})}),"\n",(0,o.jsx)(n.p,{children:"Confirming that blocks on the node also exist on most other nodes."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#disseminator-daemon",children:"Disseminator daemon"})}),"\n",(0,o.jsx)(n.p,{children:"Distributing transactions and blocks to other honor nodes."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"QueueParserBlocks daemon"}),"\n",(0,o.jsx)(n.p,{children:"Blocks in the queue, which contains blocks from other nodes."}),"\n",(0,o.jsxs)(n.p,{children:["Block processing logic is the same as\n",(0,o.jsx)(n.a,{href:"#blockcollection-daemon",children:"BlockCollection daemon"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"QueueParserTx daemon"}),"\n",(0,o.jsx)(n.p,{children:"Verifying the transactions in queue."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Scheduler daemon"}),"\n",(0,o.jsx)(n.p,{children:"Running contracts as scheduled."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"guardian-node-daemon",children:"Guardian node daemon"}),"\n",(0,o.jsx)(n.p,{children:"A guardian node runs the following server daemons:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#blockcollection-daemon",children:"BlockCollection daemon"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#confirmations-daemon",children:"Confirmations daemon"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"#disseminator-daemon",children:"Disseminator daemon"})}),"\n",(0,o.jsx)(n.li,{children:"QueueParserTx"}),"\n",(0,o.jsx)(n.li,{children:"Scheduler"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"blockcollection-daemon",children:"BlockCollection daemon"}),"\n",(0,o.jsx)(n.p,{children:"This daemon downloads blocks and synchronizes the blockchain with other network\nnodes."}),"\n",(0,o.jsx)(n.h3,{id:"blockchain-synchronization",children:"Blockchain synchronization"}),"\n",(0,o.jsx)(n.p,{children:"This daemon synchronizes the blockchain by determining the maximum block height\nin the blockchain network, requesting new blocks, and solving the fork issue in\nthe blockchain."}),"\n",(0,o.jsx)(n.h4,{id:"check-for-blockchain-updates",children:"Check for blockchain updates"}),"\n",(0,o.jsx)(n.p,{children:"This daemon sends requests from the current block ID to all honor nodes."}),"\n",(0,o.jsx)(n.p,{children:"If the current block ID of the node running the daemon is less than the current\nblock ID of any honor node, the blockchain network node is considered out of\ndate."}),"\n",(0,o.jsx)(n.h4,{id:"download-new-blocks",children:"Download new blocks"}),"\n",(0,o.jsx)(n.p,{children:"The node that returns the largest current block height is considered the latest\nnode. The daemon downloads all unknown blocks."}),"\n",(0,o.jsx)(n.h4,{id:"solving-the-fork-issue",children:"Solving the fork issue"}),"\n",(0,o.jsx)(n.p,{children:"If a fork is detected in the blockchain, the daemon moves the fork backward by\ndownloading all blocks to a common parent block. When found the common parent\nblock, a blockchain rollback is performed on the node running the daemon, and\nthe correct block is added to the blockchain until the latest one is included."}),"\n",(0,o.jsx)(n.h3,{id:"tables-1",children:"Tables"}),"\n",(0,o.jsx)(n.p,{children:"The BlocksCollection daemon uses the following tables:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"block_chain"}),"\n",(0,o.jsx)(n.li,{children:"transactions"}),"\n",(0,o.jsx)(n.li,{children:"transactions_status"}),"\n",(0,o.jsx)(n.li,{children:"info_block"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"request-1",children:"Request"}),"\n",(0,o.jsx)(n.p,{children:"The BlockCollection daemon sends the following requests to other daemons:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#type-10",children:"Type 10"})," points to the largest block ID among all honor nodes."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#type-7",children:"Type 7"})," points to the data with the largest block ID."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"blockgenerator-daemon",children:"BlockGenerator daemon"}),"\n",(0,o.jsx)(n.p,{children:"The BlockGenerator daemon generates new blocks."}),"\n",(0,o.jsx)(n.h3,{id:"pre-verification",children:"Pre-verification"}),"\n",(0,o.jsx)(n.p,{children:"The BlockGenerator daemon analyzes the latest blocks in the blockchain to make\nnew block generation plans."}),"\n",(0,o.jsx)(n.p,{children:"If the following conditions are met, a new block can be generated:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"The node that generated the latest block is in a node within the honor node\nlist and runs the daemon."}),"\n",(0,o.jsx)(n.li,{children:"The shortest time since the latest unverified block was generated."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"block-generation",children:"Block generation"}),"\n",(0,o.jsxs)(n.p,{children:["A new block generated by the daemon contains all new transactions, which can be\nreceived from the ",(0,o.jsx)(n.a,{href:"#disseminator-daemon",children:"Disseminator daemon"})," of other nodes or\ngenerated by the node running the daemon. The block generated is stored in the\nnode database."]}),"\n",(0,o.jsx)(n.h3,{id:"tables-2",children:"Tables"}),"\n",(0,o.jsx)(n.p,{children:"The BlockGenerator daemon uses the following tables:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"block_chain (saves new blocks)"}),"\n",(0,o.jsx)(n.li,{children:"transactions"}),"\n",(0,o.jsx)(n.li,{children:"transactions_status"}),"\n",(0,o.jsx)(n.li,{children:"info_block"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"request-2",children:"Request"}),"\n",(0,o.jsx)(n.p,{children:"The BlockGenerator daemon does not make any request to other daemons."}),"\n",(0,o.jsx)(n.h2,{id:"disseminator-daemon",children:"Disseminator daemon"}),"\n",(0,o.jsx)(n.p,{children:"The Disseminator daemon sends transactions and blocks to all honor nodes."}),"\n",(0,o.jsx)(n.h3,{id:"guardian-node",children:"Guardian node"}),"\n",(0,o.jsx)(n.p,{children:"When working on a guardian node, the daemon sends transactions generated by its\nnode to all honor nodes."}),"\n",(0,o.jsx)(n.h3,{id:"honor-node",children:"Honor node"}),"\n",(0,o.jsx)(n.p,{children:"When working on a honor node, the daemon sends blocks generated and transaction\nhashes to all honor nodes."}),"\n",(0,o.jsx)(n.p,{children:"Then, the honor node responds to transaction requests unknown to it. The daemon\nsends the complete transaction data as a response."}),"\n",(0,o.jsx)(n.h3,{id:"tables-3",children:"Tables"}),"\n",(0,o.jsx)(n.p,{children:"The Disseminator daemon uses the following tables:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"transactions"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"request-3",children:"Request"}),"\n",(0,o.jsx)(n.p,{children:"The Disseminator daemon sends the following requests to other daemons:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#type-1",children:"Type 1"})," Send transactions and block hashes to the honor node."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#type-2",children:"Type 2"})," Receive transaction data from the honor node."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"confirmations-daemon",children:"Confirmations daemon"}),"\n",(0,o.jsx)(n.p,{children:"The Confirmations daemon checks whether all the blocks in its node exist on most\nother nodes."}),"\n",(0,o.jsx)(n.h3,{id:"block-confirmation",children:"Block confirmation"}),"\n",(0,o.jsx)(n.p,{children:"A block confirmed by multiple node in the network is considered as a confirmed\nblock."}),"\n",(0,o.jsx)(n.p,{children:"The daemon confirms all blocks one by one starting from the first that is\ncurrently not confirmed in the database."}),"\n",(0,o.jsx)(n.p,{children:"Each block is confirmed in the way as follows:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Sending a request containing the ID of the block being confirmed to all honor\nnodes."}),"\n",(0,o.jsx)(n.li,{children:"All honor nodes respond to the block hash."}),"\n",(0,o.jsx)(n.li,{children:"If the hash responded matches the hash of the block on the daemon node, the\nconfirmation counter value is increased. If not, the cancellation counter\nvalue is increased."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"tables-4",children:"Tables"}),"\n",(0,o.jsx)(n.p,{children:"The Confirmations daemon uses the following tables:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"confirmation"}),"\n",(0,o.jsx)(n.li,{children:"info_block"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"request-4",children:"Request"}),"\n",(0,o.jsx)(n.p,{children:"The Confirmations daemon sends the following requests to other daemons:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"#type-4",children:"Type 4"})," Request block hashes from the honor node."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"tcp-service-protocol",children:"TCP service protocol"}),"\n",(0,o.jsx)(n.p,{children:"The TCP service protocol works on honor nodes and guardian nodes, which uses the\nbinary protocol on TCP to requests from the BlocksCollection, Disseminator, and\nConfirmation daemons."}),"\n",(0,o.jsx)(n.h2,{id:"request-type",children:"Request type"}),"\n",(0,o.jsx)(n.p,{children:"Each request has a type defined by the first two bytes of the request."}),"\n",(0,o.jsx)(n.h3,{id:"type-1",children:"Type 1"}),"\n",(0,o.jsx)(n.h4,{id:"request-sender-1",children:"Request sender"}),"\n",(0,o.jsxs)(n.p,{children:["This request is sent by the ",(0,o.jsx)(n.a,{href:"#disseminator-daemon",children:"Disseminator daemon"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"request-data-1",children:"Request data"}),"\n",(0,o.jsx)(n.p,{children:"Hashes of the transaction and block."}),"\n",(0,o.jsx)(n.h4,{id:"request-processing-1",children:"Request processing"}),"\n",(0,o.jsx)(n.p,{children:"The block hash is added to the block queue."}),"\n",(0,o.jsx)(n.p,{children:"Analyzes and verifies the transaction hashes, and select transactions that have\nnot yet appeared on the node."}),"\n",(0,o.jsx)(n.h4,{id:"response-1",children:"Response"}),"\n",(0,o.jsxs)(n.p,{children:["No. After processing the request, a ",(0,o.jsx)(n.a,{href:"#type-2",children:"Type 2"})," request is issued."]}),"\n",(0,o.jsx)(n.h3,{id:"type-2",children:"Type 2"}),"\n",(0,o.jsx)(n.h4,{id:"request-sender-2",children:"Request sender"}),"\n",(0,o.jsxs)(n.p,{children:["This request is sent by the ",(0,o.jsx)(n.a,{href:"#disseminator-daemon",children:"Disseminator daemon"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"request-data-2",children:"Request data"}),"\n",(0,o.jsx)(n.p,{children:"The transaction data, including the data size:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"data_size (4 bytes)"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Size of the transaction data, in bytes."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"data (data_size bytes)"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The transaction data."}),"\n",(0,o.jsx)(n.h4,{id:"request-processing-2",children:"Request processing"}),"\n",(0,o.jsx)(n.p,{children:"Verifies the transaction and add it to the transaction queue."}),"\n",(0,o.jsx)(n.h4,{id:"response-2",children:"Response"}),"\n",(0,o.jsx)(n.p,{children:"No."}),"\n",(0,o.jsx)(n.h3,{id:"type-4",children:"Type 4"}),"\n",(0,o.jsx)(n.h4,{id:"request-sender-3",children:"Request sender"}),"\n",(0,o.jsxs)(n.p,{children:["This request is sent by the ",(0,o.jsx)(n.a,{href:"#confirmations-daemon",children:"Confirmations daemon"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"request-data-3",children:"Request data"}),"\n",(0,o.jsx)(n.p,{children:"Block ID."}),"\n",(0,o.jsx)(n.h4,{id:"response-3",children:"Response"}),"\n",(0,o.jsx)(n.p,{children:"Block hash."}),"\n",(0,o.jsxs)(n.p,{children:["Returns ",(0,o.jsx)(n.code,{children:"0"})," if not having a block with this ID."]}),"\n",(0,o.jsx)(n.h3,{id:"type-7",children:"Type 7"}),"\n",(0,o.jsx)(n.h4,{id:"request-sender-4",children:"Request sender"}),"\n",(0,o.jsxs)(n.p,{children:["This request is sent by the ",(0,o.jsx)(n.a,{href:"#blockcollection-daemon",children:"BlockCollection daemon"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"request-data-4",children:"Request data"}),"\n",(0,o.jsx)(n.p,{children:"Block ID."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"block_id (4 bytes)"}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"response-4",children:"Response"}),"\n",(0,o.jsx)(n.p,{children:"The block data, including data size."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"data_size (4 bytes)"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Size of the block data, in bytes."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"data (data_size bytes)"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The block data."}),"\n",(0,o.jsx)(n.p,{children:"The connection is closed if not having a block with this ID."}),"\n",(0,o.jsx)(n.h3,{id:"type-10",children:"Type 10"}),"\n",(0,o.jsx)(n.h4,{id:"request-sender-5",children:"Request sender"}),"\n",(0,o.jsxs)(n.p,{children:["This request is sent by the ",(0,o.jsx)(n.a,{href:"#blockcollection-daemon",children:"BlockCollection daemon"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"request-data-5",children:"Request data"}),"\n",(0,o.jsx)(n.p,{children:"No."}),"\n",(0,o.jsx)(n.h4,{id:"response-5",children:"Response"}),"\n",(0,o.jsx)(n.p,{children:"Block ID."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"block_id (4 bytes)"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>t});var o=s(6540);const i={},l=o.createContext(i);function d(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);